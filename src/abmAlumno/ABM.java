package abmAlumno;

import dao.AlumnoDAOTxt;
import dao.DAOException;
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileNotFoundException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import persona.Alumno;
import persona.AlumnoInvalidoException;
import persona.FechaInvalidaException;
import persona.MiCalendar;
import persona.PersonaInvalidaException;

public class ABM extends javax.swing.JFrame {

    /**
     * Creates new form ABM
     */
    public ABM() {
        initComponents();
        //Centra el ABM en la pantalla
        this.setLocationRelativeTo(null);

        //Seteo el estado default
        setEstadoDefault();

        miModeloTabla = new MiModeloTabla();

        //Hago la "conexion" entre la tabla y el modelo
        tabla.setModel(miModeloTabla);

        //Envio un array vacio
        miModeloTabla.setLista(new ArrayList<>());
        miModeloTabla.fireTableDataChanged();

        //Habilito la tabla
        tabla.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nuevoButton = new javax.swing.JButton();
        abrirButton = new javax.swing.JButton();
        guardarButton = new javax.swing.JButton();
        borrarButton = new javax.swing.JButton();
        cancelarButton = new javax.swing.JButton();
        dniFormattedTextField = new javax.swing.JFormattedTextField();
        apynTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        sexoComboBox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        fechaNacDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        cantMateriasTextField = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        fechaIngrDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        promedioTextField = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        archivoTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        seleccionarArchivoButton = new javax.swing.JButton();
        estadoComboBox = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        habilitadosCheckBox = new javax.swing.JCheckBox();
        deshabilitadosCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        nuevoButton.setText("Nuevo");
        nuevoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoButtonActionPerformed(evt);
            }
        });

        abrirButton.setText("Abrir");
        abrirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirButtonActionPerformed(evt);
            }
        });

        guardarButton.setText("Guardar");
        guardarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarButtonActionPerformed(evt);
            }
        });

        borrarButton.setText("Borrar");
        borrarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarButtonActionPerformed(evt);
            }
        });

        cancelarButton.setText("Cancelar");
        cancelarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarButtonActionPerformed(evt);
            }
        });

        dniFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        dniFormattedTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dniFormattedTextFieldKeyPressed(evt);
            }
        });

        jLabel1.setText("DNI");

        jLabel2.setText("Apell y Nom");

        sexoComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "M", "F" }));

        jLabel3.setText("Sexo");

        fechaNacDateChooser.setDateFormatString("dd/MM/yyyy");

        jLabel4.setText("Fecha Nac.");

        cantMateriasTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        jLabel5.setText("Cant. Mat. Aprob.");

        fechaIngrDateChooser.setDateFormatString("dd/MM/yyyy");

        jLabel6.setText("Fecha Ingr.");

        promedioTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));

        jLabel7.setText("Promedio");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabla);

        jLabel8.setText("Alumnos");

        jLabel9.setText("Archivo");

        seleccionarArchivoButton.setText("...");
        seleccionarArchivoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarArchivoButtonActionPerformed(evt);
            }
        });

        estadoComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A", "B" }));

        jLabel10.setText("Estado");

        habilitadosCheckBox.setText("Habilitados");
        habilitadosCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                habilitadosCheckBoxItemStateChanged(evt);
            }
        });

        deshabilitadosCheckBox.setText("Deshabilitados");
        deshabilitadosCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                deshabilitadosCheckBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(dniFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel1))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                            .addComponent(apynTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(3, 3, 3)
                                                .addComponent(sexoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jLabel3))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fechaNacDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(cantMateriasTextField))
                                        .addGap(36, 36, 36))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(fechaIngrDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel6))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(promedioTextField))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel10)
                                                    .addComponent(estadoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cancelarButton, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(nuevoButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(abrirButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(borrarButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(guardarButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(archivoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(seleccionarArchivoButton)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(habilitadosCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deshabilitadosCheckBox)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(archivoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(seleccionarArchivoButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(dniFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(apynTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel5)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(cantMateriasTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(fechaNacDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(sexoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(6, 6, 6)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel3)
                                                .addComponent(jLabel4)))))
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel10)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(promedioTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(estadoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(fechaIngrDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(habilitadosCheckBox)
                            .addComponent(deshabilitadosCheckBox)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(nuevoButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(abrirButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(guardarButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(borrarButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelarButton)
                        .addGap(35, 35, 35)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nuevoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoButtonActionPerformed
        setEstadoNuevo();
    }//GEN-LAST:event_nuevoButtonActionPerformed

    private void seleccionarArchivoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarArchivoButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();

        int resp = fileChooser.showOpenDialog(this);

        if (resp != JFileChooser.APPROVE_OPTION) {
            return;
        }

        archivoAbierto = fileChooser.getSelectedFile();

        try {
            dao = new AlumnoDAOTxt(archivoAbierto);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
        }

        setEstadoInicial();

        //Setea en el text field de archivo el path
        archivoTextField.setText(fileChooser.getSelectedFile().getAbsolutePath());

        //Coloca en la tabla todos los elementos, sin importar su estado
        miModeloTabla.setLista(dao.getTodos());
        miModeloTabla.fireTableDataChanged();

        //Setea los checkbox
        deshabilitadosCheckBox.setSelected(true);
        habilitadosCheckBox.setSelected(true);

    }//GEN-LAST:event_seleccionarArchivoButtonActionPerformed

    private void cancelarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarButtonActionPerformed
        setEstadoInicial();
    }//GEN-LAST:event_cancelarButtonActionPerformed

    private void guardarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarButtonActionPerformed
        try {
            guardar();
        } catch (HeadlessException | DAOException ex) {
            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_guardarButtonActionPerformed

    private void guardar() throws HeadlessException, DAOException {
        Alumno alu;
        try {
            alu = formularioAAlumno();
        } catch (FormularioException | PersonaInvalidaException | FechaInvalidaException ex) {
            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //Segun el estado de la flag nuevo, se hara una determinada accion.
        if (registroNuevo) {
            try {
                dao.insertar(alu);
            } catch (DAOException ex) {
                Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
                //Entra aca cuando existe un DNI ya existente

                //En caso que el registro correspondiente en el Archivo este seteado en Activo
                if (("A".equals(String.valueOf((dao.buscar(alu.getDni())).getEstado())))) {
                    int resp = JOptionPane.showOptionDialog(this, "¿Desea actualizar el registro?", "El registro ya existe", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null, null, null);

                    //Si toca cancelar, retorna, no hace nada
                    if (JOptionPane.NO_OPTION == resp) {
                        return;
                    } //Sobreescribe los datos
                    else if (JOptionPane.OK_OPTION == resp) {

                        try {
                            dao.actualizar(alu);
                        } catch (DAOException ex1) {
                            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex1);
                        }

                    }
                } else {
                    //En caso que el registro correspondiente en el Archivo este seteado en Inactivo (B) 
                    int resp = JOptionPane.showOptionDialog(this, "¿Desea activar el registro?", "El registro ya existe", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, null, null);

                    switch (resp) {
                        //Si toca cancelar, no hace nada
                        case JOptionPane.CANCEL_OPTION:
                            return;
                        //Si toca que no, simplemente actualiza con los datos ingresados y lo setea en Activo
                        case JOptionPane.NO_OPTION:
                            try {
                                alu.setEstado("A".charAt(0));
                                dao.actualizar(alu);
                            } catch (DAOException ex1) {
                                Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex1);
                            }
                            break;
                        //Si toca que si, seteo el estado en Activo y recupero el registro del archivo
                        case JOptionPane.YES_OPTION:
                            try {
                                alu = dao.buscar(alu.getDni());
                                alu.setEstado("A".charAt(0));
                                dao.actualizar(alu);
                            } catch (DAOException ex1) {
                                Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex1);
                            }
                            break;
                        default:
                            break;
                    }
                }
            }
        } else {
            //Si no es registro nuevo, entonces intenta actualizar
            try {
                dao.actualizar(alu);
            } catch (DAOException ex) {
                Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        //En el caso que no haya errores (ya que al ocurrir DAO retorna null), se vuelve al estado inicial
        if (alu != null) {
            setEstadoInicial();
        }
    }


    private void abrirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirButtonActionPerformed
        abrir();

    }//GEN-LAST:event_abrirButtonActionPerformed

    /*
    * abrir()
    * @returns boolean. Para determinar si se abrio un archivo o no
    * true = error, false = todo bien
     */
    private void abrir() {
        Alumno alu = null;
        String aux = dniFormattedTextField.getText();

        //En el caso que el campo DNI este vacio, muestra un mensaje
        if (aux.trim().length() == 0) {
            JOptionPane.showMessageDialog(this, "Por favor complete el campo DNI", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //Validacion del commit edit
        try {
            commitEdit(dniFormattedTextField, "El DNI es Inválido");
        } catch (FormularioException ex) {
            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Intenta buscar el DNI
        try {
            alu = dao.buscar(((Long) dniFormattedTextField.getValue()).intValue());

        } catch (DAOException ex) {
            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
        }

        //En el caso que buscar haya retornado un objeto nulo.
        if (alu == null) {
            JOptionPane.showMessageDialog(this, "No se encontro el Alumno con DNI " + dniFormattedTextField.getValue(), "Error", JOptionPane.ERROR_MESSAGE);
            dniFormattedTextField.setText("");
            return;
        }

        //Envia desde el archivo al formulario del ABM
        try {
            alumnoAFormulario(alu);
        } catch (FormularioException ex) {
            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Setea el estado
        setEstadoAbrir();
    }

    private void borrarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarButtonActionPerformed
        Alumno alu = new Alumno();

        //Setea el DNI en un objeto alumno
        try {
            dniFormattedTextField.commitEdit();
        } catch (ParseException ex) {
            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            alu.setDni(((Long) dniFormattedTextField.getValue()).intValue());
        } catch (PersonaInvalidaException ex) {
            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Setea nombre y apellido
        try {
            alu.setApyn(apynTextField.getText());
        } catch (PersonaInvalidaException ex) {
            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Setea el sexo
        alu.setSexo(((String) sexoComboBox.getSelectedItem()).charAt(0));

        //Setea la fecha de nacimiento
        try {
            alu.setFechaNac(new MiCalendar(fechaNacDateChooser.getCalendar()));
        } catch (FechaInvalidaException | NullPointerException ex) {
            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Setea la cantidad de materias aprobadas
        try {
            cantMateriasTextField.commitEdit();
        } catch (ParseException ex) {
            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
        }

        alu.setCantMatAprob(((Long) cantMateriasTextField.getValue()).intValue());

        //Setea la fecha de ingreso
        try {
            alu.setFechaIngr(new MiCalendar(fechaIngrDateChooser.getCalendar()));
        } catch (FechaInvalidaException | NullPointerException ex) {
            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Setea el promedio
        try {
            promedioTextField.commitEdit();
        } catch (ParseException ex) {
            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            alu.setPromedio(((Number) promedioTextField.getValue()).doubleValue());
        } catch (AlumnoInvalidoException ex) {
            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Por ultimo, setea el estado
        alu.setEstado(((String) estadoComboBox.getSelectedItem()).charAt(0));

        //Llama al metodo eliminar
        dao.eliminar(alu);

        //Vuelve al estado inicial, listo para buscar o crear un registro.
        setEstadoInicial();
    }//GEN-LAST:event_borrarButtonActionPerformed

    /*
    * deshabilitadosCheckBoxItemStateChanged()
    * 
    * @return void
    * Determina la flag deshabilitados y llama al metodo actualizar tabla.
    * Invierte la flag cuando se toca el checkbox
     */
    private void deshabilitadosCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_deshabilitadosCheckBoxItemStateChanged
        deshabilitados = !deshabilitados;

        actualizarTabla();
    }//GEN-LAST:event_deshabilitadosCheckBoxItemStateChanged

    /*
    * habilitadosCheckBoxItemStateChanged()
    * 
    * @return void
    * Determina la flag habilitados y llama al metodo actualizar tabla.
    * Invierte la flag cuando se toca el checkbox
     */
    private void habilitadosCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_habilitadosCheckBoxItemStateChanged
        habilitados = !habilitados;

        actualizarTabla();
    }//GEN-LAST:event_habilitadosCheckBoxItemStateChanged

    /*
    * Al tocar enter en el campo del DNI, en el caso de que haya un registro nuevo o abierto, se guarda.
    * Caso contrario, se abre (busca en el archivo y trae al formulario los datos correspondientes a esa persona)
     */
    private void dniFormattedTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dniFormattedTextFieldKeyPressed
        if (evt.getKeyChar() == '\n') {
            if (registroNuevo || registroAbierto) {
                try {
                    guardar();
                } catch (HeadlessException | DAOException ex) {
                    Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                abrir();
            }
        }
    }//GEN-LAST:event_dniFormattedTextFieldKeyPressed

    /*
    * setEstadoInicial()
    * 
    * @return void
    * Habilita/deshabilita elementos. Se setea luego de abrir un archivo.
    * Luego, limpia los campos.
     */
    private void setEstadoInicial() {
        archivoTextField.setEnabled(true);
        seleccionarArchivoButton.setEnabled(true);
        dniFormattedTextField.setEnabled(true);
        nuevoButton.setEnabled(true);
        abrirButton.setEnabled(true);
        guardarButton.setEnabled(false);
        borrarButton.setEnabled(false);
        cancelarButton.setEnabled(false);
        apynTextField.setEnabled(false);
        sexoComboBox.setEnabled(false);
        estadoComboBox.setEnabled(false);
        fechaNacDateChooser.setEnabled(false);
        fechaIngrDateChooser.setEnabled(false);
        promedioTextField.setEnabled(false);
        cantMateriasTextField.setEnabled(false);
        sexoComboBox.setSelectedIndex(0);
        estadoComboBox.setSelectedIndex(0);
        fechaNacDateChooser.setDate(null);
        fechaIngrDateChooser.setDate(null);
        habilitadosCheckBox.setEnabled(true);
        deshabilitadosCheckBox.setEnabled(true);

        limpiarCampos();
        actualizarTabla();
        //Setea las flag de registro abierto y registro nuevo
        registroNuevo = false;
        registroAbierto = false;
    }

    /*
    * setEstadoDefault()
    * 
    * @return void
    * Habilita/deshabilita elementos. Se setea apenas se ejecuta el programa.
     */
    private void setEstadoDefault() {
        archivoTextField.setEnabled(true);
        seleccionarArchivoButton.setEnabled(true);
        dniFormattedTextField.setEnabled(false);
        nuevoButton.setEnabled(false);
        abrirButton.setEnabled(false);
        guardarButton.setEnabled(false);
        borrarButton.setEnabled(false);
        cancelarButton.setEnabled(false);
        apynTextField.setEnabled(false);
        sexoComboBox.setEnabled(false);
        estadoComboBox.setEnabled(false);
        fechaNacDateChooser.setEnabled(false);
        fechaIngrDateChooser.setEnabled(false);
        promedioTextField.setEnabled(false);
        cantMateriasTextField.setEnabled(false);
        habilitadosCheckBox.setEnabled(false);
        deshabilitadosCheckBox.setEnabled(false);
    }

    /*
    * setEstadoNuevo()
    * 
    * @return void
    * Limpia los campos y procede a habilitar/deshabilitar elementos. Se setea cuando se clickea el boton Nuevo
    * Tambien utiliza una flag para determinar si se esta creando un nuevo registro.
     */
    private void setEstadoNuevo() {
        limpiarCampos();

        archivoTextField.setEnabled(false);
        seleccionarArchivoButton.setEnabled(false);
        dniFormattedTextField.setEnabled(true);
        nuevoButton.setEnabled(false);
        abrirButton.setEnabled(false);
        guardarButton.setEnabled(true);
        borrarButton.setEnabled(false);
        cancelarButton.setEnabled(true);
        apynTextField.setEnabled(true);
        sexoComboBox.setEnabled(true);
        estadoComboBox.setEnabled(false);
        estadoComboBox.setSelectedIndex(0);
        fechaNacDateChooser.setEnabled(true);
        fechaIngrDateChooser.setEnabled(true);
        promedioTextField.setEnabled(true);
        cantMateriasTextField.setEnabled(true);

        //Coloca en true la flag de nuevo registro
        registroNuevo = true;
    }

    /*
    * setEstadoAbrir()
    * 
    * @return void
    * Habilitar/deshabilita elementos. Se setea cuando se clickea el boton Abrir
     */
    private void setEstadoAbrir() {
        archivoTextField.setEnabled(false);
        seleccionarArchivoButton.setEnabled(false);
        dniFormattedTextField.setEnabled(true);
        nuevoButton.setEnabled(false);
        abrirButton.setEnabled(false);
        guardarButton.setEnabled(true);
        borrarButton.setEnabled(true);
        cancelarButton.setEnabled(true);
        apynTextField.setEnabled(true);
        sexoComboBox.setEnabled(true);
        estadoComboBox.setEnabled(true);
        fechaNacDateChooser.setEnabled(true);
        fechaIngrDateChooser.setEnabled(true);
        promedioTextField.setEnabled(true);
        cantMateriasTextField.setEnabled(true);

        //Coloca en true la flag de archivo abierto
        registroAbierto = true;
    }

    /*
    * alumnoAFormulario(Alumno alu)
    *
    * @params Objet de tipo Alumno obtenido desde el archivo.
    * @throws FormularioException
    * @returns void
     */
    private void alumnoAFormulario(Alumno alu) throws FormularioException {

        commitEdit(dniFormattedTextField, "El DNI es Inválido");

        dniFormattedTextField.setText(String.valueOf(alu.getDni()));

        apynTextField.setText(alu.getApyn());

        sexoComboBox.setSelectedItem(String.valueOf(alu.getSexo()));

        fechaNacDateChooser.setCalendar(alu.getFechaNac());

        cantMateriasTextField.setText(String.valueOf(alu.getCantMatAprob()));

        fechaIngrDateChooser.setCalendar(alu.getFechaIngr());

        promedioTextField.setText(String.valueOf(alu.getPromedio()).replace(".", ","));

        estadoComboBox.setSelectedItem(String.valueOf(alu.getEstado()));
    }

    /*
    * formularioAAlumno()
    *
    * Pasa del formulario al archivo
    * @throws FormularioException, PersonaInvalidaException, FechaInvalidaException
    * @returns objeto tipo Alumno
     */
    private Alumno formularioAAlumno() throws FormularioException, PersonaInvalidaException, FechaInvalidaException {
        Alumno alu = new Alumno();

        //Setea el DNI
        commitEdit(dniFormattedTextField, "El DNI es Inválido");
        if (((Long) dniFormattedTextField.getValue()).intValue() > 99999999 || ((Long) dniFormattedTextField.getValue()).intValue() <= 0) {
            JOptionPane.showMessageDialog(this, "El DNI es inválido", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        } else {
            alu.setDni(((Long) dniFormattedTextField.getValue()).intValue());
        }

        //Verifica que el nombre contenga unicamente letras
        if ((apynTextField.getText()).matches(".*\\d.*")) {
            JOptionPane.showMessageDialog(this, "El nombre solo puede contener letras!", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        } else {
            alu.setApyn(apynTextField.getText());
        }

        //Verifica que el select de sexo no este vacio
        if (((String) sexoComboBox.getSelectedItem()).charAt(0) == ' ') {
            JOptionPane.showMessageDialog(this, "Por favor seleccion un sexo.", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        } else {
            alu.setSexo(((String) sexoComboBox.getSelectedItem()).charAt(0));
        }

        //Verifica fecha de nacimiento
        try {
            alu.setFechaNac(new MiCalendar(fechaNacDateChooser.getCalendar()));
        } catch (FechaInvalidaException | NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Fecha de nacimiento invalida", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }

        //Setea cantidad de materias aprobadas
        commitEdit(cantMateriasTextField, "La Cant Mat Aprob es inválida");
        alu.setCantMatAprob(((Long) cantMateriasTextField.getValue()).intValue());

        //Verifica fecha de ingreso
        try {
            alu.setFechaIngr(new MiCalendar(fechaIngrDateChooser.getCalendar()));
        } catch (FechaInvalidaException | NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Fecha de ingreso invalida", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }

        //Verifica promedio
        commitEdit(promedioTextField, "El promedio es Inválido");
        if (((Number) promedioTextField.getValue()).doubleValue() > 10.0 || ((Number) promedioTextField.getValue()).doubleValue() < 1.0) {
            JOptionPane.showMessageDialog(this, "El promedio es inválido", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        } else {
            alu.setPromedio(((Number) promedioTextField.getValue()).doubleValue());
        }

        //Setea el estado
        alu.setEstado(((String) estadoComboBox.getSelectedItem()).charAt(0));

        return alu;
    }

    /*
    * limpiarCampos()
    *
    * Setea los campos que no son combobox o fechas.
    * @returns void
     */
    private void limpiarCampos() {
        apynTextField.setText("");
        dniFormattedTextField.setValue(null);
        cantMateriasTextField.setValue(null);
        promedioTextField.setValue(null);
    }

    /*
    * commitEdit(JFormattedTextField formattedTextField, String mensaje)
    *
    * @params Recibe un FormattedTextField y un mensaje que se mostrara en caso de error.
    * @throws FormularioException en caso de error.
    * @returns void
     */
    private void commitEdit(JFormattedTextField formattedTextField, String mensaje) throws FormularioException {
        try {
            formattedTextField.commitEdit();
        } catch (ParseException ex) {
            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
            throw new FormularioException(mensaje);
        }
    }

    /*
    * actualizarTabla()
    *
    * Segun las flags, realiza el manejo de datos.
    * @returns void
     */
    private void actualizarTabla() {
        if (habilitados && deshabilitados) {
            miModeloTabla.setLista(dao.getTodos());
            miModeloTabla.fireTableDataChanged();
        } else if (habilitados && !deshabilitados) {
            miModeloTabla.setLista(dao.getHabilitados());
            miModeloTabla.fireTableDataChanged();

        } else if (!habilitados && deshabilitados) {
            miModeloTabla.setLista(dao.getDeshabilitados());
            miModeloTabla.fireTableDataChanged();
        } else {
            miModeloTabla.setLista(new ArrayList<>());
            miModeloTabla.fireTableDataChanged();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ABM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ABM().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abrirButton;
    private javax.swing.JTextField apynTextField;
    private javax.swing.JTextField archivoTextField;
    private javax.swing.JButton borrarButton;
    private javax.swing.JButton cancelarButton;
    private javax.swing.JFormattedTextField cantMateriasTextField;
    private javax.swing.JCheckBox deshabilitadosCheckBox;
    private javax.swing.JFormattedTextField dniFormattedTextField;
    private javax.swing.JComboBox<String> estadoComboBox;
    private com.toedter.calendar.JDateChooser fechaIngrDateChooser;
    private com.toedter.calendar.JDateChooser fechaNacDateChooser;
    private javax.swing.JButton guardarButton;
    private javax.swing.JCheckBox habilitadosCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton nuevoButton;
    private javax.swing.JFormattedTextField promedioTextField;
    private javax.swing.JButton seleccionarArchivoButton;
    private javax.swing.JComboBox<String> sexoComboBox;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables

    private AlumnoDAOTxt dao;
    private MiModeloTabla miModeloTabla;
    private File archivoAbierto;
    private boolean registroNuevo = false;
    private boolean registroAbierto = false;
    private boolean habilitados = false;
    private boolean deshabilitados = false;
}
